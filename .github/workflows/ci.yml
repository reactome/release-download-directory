name: download directory ci


on:
    workflow_dispatch:
    
    pull_request:
        types:
            - opened
            - synchronize
    
    push:
        branches:
            - main


permissions:
    id-token: write
    contents: read


jobs:
    docker-build:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            
            - env:
                DB_USER : ${{ secrets.DB_USER }}
                DB_PASS : ${{ secrets.DB_PASS }}
              run: |
                envsubst '${DB_USER},${DB_PASS}' < secrets-template.pm > Secrets.pm

            - uses: docker/setup-buildx-action@v3
            
            - uses: docker/build-push-action@v5
              with:
                context: .
                file: Dockerfile
                tags: tmp-tag
                outputs: type=docker,dest=/tmp/image.tar

            - uses: actions/upload-artifact@v4
              with:
                name: image-artifact
                path: /tmp/image.tar
                
    docker-push:
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
        needs: docker-build
        runs-on: ubuntu-latest
        steps:
            - env:
                AWS_ROLE : arn:aws:iam::851227637779:role/Github_Actions_CI
                AWS_REGION : us-east-1
              uses: aws-actions/configure-aws-credentials@v4
              with:
                role-to-assume: ${{ env.AWS_ROLE }}
                aws-region: ${{ env.AWS_REGION }}
  
            - id: login-ecr
              uses: aws-actions/amazon-ecr-login@v2
            
            - uses: actions/download-artifact@v4
              with:
                name: image-artifact
                path: /tmp

            - env:
                AWS_REGISTRY : ${{ steps.login-ecr.outputs.registry }}
                AWS_REPO : release-download-directory
                IMG_TAG : latest 
              run: |
                docker load --input /tmp/image.tar
                docker image tag tmp-tag $AWS_REGISTRY/$AWS_REPO:$IMG_TAG
                docker push $AWS_REGISTRY/$AWS_REPO:$IMG_TAG
                